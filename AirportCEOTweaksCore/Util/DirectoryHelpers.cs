using System;
using System.Collections.Generic;
using System.IO;
using Steamworks;

namespace AirportCEOTweaksCore.Util;


public static class DirectoryHelpers
{
    static readonly string ModPath = ModManager.GetModPath();

    static string _workshopPath;
    public static string WorkshopPath
    {
        get
        {
            if (_workshopPath == null)
            {
                try
                {
                    AppId_t appId = SteamUtils.GetAppID();
                    string installDir;
                    // allocate a big enough buffer
                    SteamApps.GetAppInstallDir(appId, out installDir, 4096);

                    if (!string.IsNullOrEmpty(installDir))
                    {
                        // go up to the library root and build the workshop path
                        var libraryRoot = Directory.GetParent(Directory.GetParent(installDir)?.FullName ?? "")?.Parent?.FullName;
                        if (!string.IsNullOrEmpty(libraryRoot))
                            _workshopPath = Path.Combine(libraryRoot, "steamapps", "workshop", "content", appId.ToString());
                    }
                }
                catch (Exception ex)
                {
                    LogError($"Failed to get Workshop path: {ex.Message}");
                }
            }

            return _workshopPath;
        }
    }



    public static string[] GetLocalModDirectories()
    {
        var modPath = ModPath;

        var modDirectories = Directory.GetDirectories(modPath);
        var directories = new List<string>();

        // Check every directory in the mod folder
        for (int i = 0; i < modDirectories.Length; i++)
        {
            var modDirectory = modDirectories[i];
            //  Check if the mod is activated
            if (ModManager.GetModData(modDirectory, out var modData) && ModManager.IsModActivated(modData.id))
            {
                var subDirectories = GetSubDirectories(modDirectory);
                directories.AddRange(subDirectories);
            }

        }

        return directories.ToArray();
    }

    public static string[] GetWorkshopDirectories()
    {
        var workshopPath = WorkshopPath;

        var modDirectories = Directory.GetDirectories(workshopPath);
        var directories = new List<string>();

        // Check every directory in the mod folder
        for (int i = 0; i < modDirectories.Length; i++)
        {
            var modDirectory = modDirectories[i];
            //  Check if the mod is activated
            if (ModManager.GetModData(modDirectory, out var modData) && ModManager.IsModActivated(modData.id))
            {
                var subDirectories = GetSubDirectories(modDirectory);
                directories.AddRange(subDirectories);
            }

        }

        return directories.ToArray();
    }

    /// <summary>
    /// Safe log to remove user info from the log
    /// </summary>
    /// <param name="directory"></param>
    public static string SafeDirectoryLog(string directory)
    {
        return directory.Replace(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "$USERPROFILE$");
    }



    static string[] GetSubDirectories(string directory)
    {
        LogInfo($"Checking directory: {SafeDirectoryLog(directory)}");
        var directories = new List<string>();

        // Get every subdirectory in the mod directory
        string[] subDirectories = Directory.GetDirectories(directory);
        for (int j = 0; j < subDirectories.Length; j++)
        {
            var subDirectory = subDirectories[j];

            // For now only check companies however game code also checks Producs and Templates
            // We don't need to check Products and Templates because they are not directly editable by the user
            // Product is only images
            // Templates are generated by the game

            LogInfo($"Checking subdirectory: {SafeDirectoryLog(subDirectory)}");

            // Use recursive helper to find directories with JSON subdirectories
            var jsonDirectories = FindDirectoriesWithJsonSubdirectories(subDirectory);
            directories.AddRange(jsonDirectories);

        }

        return directories.ToArray();
    }

    /// <summary>
    /// Recursively finds directories that contain subdirectories with JSON files.
    /// Returns parent directories that JsonValidator can process.
    /// </summary>
    /// <param name="parentDir">Directory to search recursively</param>
    /// <returns>List of parent directories containing subdirectories with JSON files</returns>
    static List<string> FindDirectoriesWithJsonSubdirectories(string parentDir)
    {
        var result = new List<string>();

        try
        {
            // Get all subdirectories in the current directory
            string[] subDirs = Directory.GetDirectories(parentDir);

            foreach (string subDir in subDirs)
            {
                // Check if this subdirectory contains JSON files
                string[] jsonFiles = Directory.GetFiles(subDir, "*.json");

                if (jsonFiles.Length > 0)
                {
                    // This subdirectory contains JSON files, so the parent is what we want
                    LogInfo($"Found directory with JSON subdirectories: {SafeDirectoryLog(parentDir)}");
                    result.AddIfNotContains(parentDir);
                    break; // Found what we need for this parent, no need to check other subdirs
                }
                else
                {
                    // No JSON files in this subdirectory, check recursively
                    var deeperResults = FindDirectoriesWithJsonSubdirectories(subDir);
                    result.AddRange(deeperResults);
                }
            }
        }
        catch (Exception ex)
        {
            LogError($"Error scanning directory {SafeDirectoryLog(parentDir)}: {ex.Message}");
        }

        return result;
    }


    static void LogInfo(string message) => AirportCEOTweaksCore.LogInfo($"[DirectoryHelpers] {message}");
    static void LogError(string message) => AirportCEOTweaksCore.LogError($"[DirectoryHelpers] {message}");
}